package co.nstant.in;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import co.nstant.in.dec64.Dec64;

public class Dec64Test {

    private static final Dec64 zero = Dec64.ZERO;
    private static final Dec64 nan = Dec64.NaN;
    private static final Dec64 minnum = new Dec64(1, -127);
    private static final Dec64 negative_minnum = new Dec64(-1, -127);

    @Test
    public void testNew() {
        test_new(0, 0, zero.toLong(), "zero");
        test_new(0, 1000, zero.toLong(), "0e1000");
        test_new(0, -1000, zero.toLong(), "0e-1000");
        test_new(1, 0, (1 << 8), "one");
        test_new(1, 1000, nan.toLong(), "0e1000");
        test_new(1, -1000, zero.toLong(), "0e-1000");
        test_new(-1, 127, (-1 << 8) + 127, "-1e127");
        test_new(-1, 128, (-10 << 8) + 127, "-1e128");
        test_new(1, -128, zero.toLong(), "1e-128");
        test_new(-1, 143, (-10000000000000000L << 8) + 127, "-1e143");
        test_new(-1, 144, nan.toLong(), "-1e144");
        test_new(10, -128, minnum.toLong(), "10e-128");
        test_new(100, -129, minnum.toLong(), "100e-129");
        test_new(10000000000000001L, -16, (10000000000000001L << 8) + (0xff & -16), "10000000000000001, -16");
        test_new(36028797018963967L, 0, (36028797018963967L << 8), "3602879701896397e0");
        test_new(-36028797018963967L, 0, -36028797018963967L << 8, "-3602879701896397e0");
        test_new(36028797018963967L, -128, (3602879701896397L << 8) + (0xff & -127), "36028797018963967e-128");
        test_new(36028797018963967L, -129, (360287970189640L << 8) + (0xff & -127), "36028797018963967e-129");
        test_new(36028797018963967L, -130, (36028797018964L << 8) + (0xff & -127), "36028797018963967e-130");
        test_new(36028797018963967L, -131, (3602879701896L << 8) + (0xff & -127), "36028797018963967e-131");
        test_new(36028797018963967L, -132, (360287970190L << 8) + (0xff & -127), "36028797018963967e-132");
        test_new(36028797018963967L, -133, (36028797019L << 8) + (0xff & -127), "36028797018963967e-133");
        test_new(36028797018963967L, -134, (3602879702L << 8) + (0xff & -127), "36028797018963967e-134");
        test_new(36028797018963967L, -135, (360287970L << 8) + (0xff & -127), "36028797018963967e-135");
        test_new(36028797018963967L, -136, (36028797L << 8) + (0xff & -127), "36028797018963967e-136");
        test_new(36028797018963967L, -137, (3602880L << 8) + (0xff & -127), "36028797018963967e-137");
        test_new(36028797018963967L, -138, (360288L << 8) + (0xff & -127), "36028797018963967e-138");
        test_new(36028797018963967L, -139, (36029L << 8) + (0xff & -127), "36028797018963967e-139");
        test_new(36028797018963967L, -140, (3603L << 8) + (0xff & -127), "36028797018963967e-140");
        test_new(36028797018963967L, -141, (360L << 8) + (0xff & -127), "36028797018963967e-141");
        test_new(36028797018963967L, -142, (36L << 8) + (0xff & -127), "36028797018963967e-142");
        test_new(36028797018963967L, -143, (4L << 8) + (0xff & -127), "36028797018963967e-143");
        test_new(36028797018963967L, -144, zero.toLong(), "36028797018963967e-144");
        test_new(360287970189639670L, 0, (36028797018963967L << 8) + 1, "36028797018963970e0");
        test_new(-360287970189639670L, 0, (-36028797018963967L << 8) + 1, "-36028797018963970e0");
        test_new(3602879701896396700L, 0, (36028797018963967L << 8) + 2, "3602879701896396700e0");
        test_new(-3602879701896396700L, 0, (-36028797018963967L << 8) + 2, "-3602879701896396700e0");
        test_new(3602879701896396701L, 0, (36028797018963967L << 8) + 2, "3602879701896396701e0");
        test_new(-3602879701896396701L, 0, (-36028797018963967L << 8) + 2, "-3602879701896396701e0");
        test_new(360287970189639674L, 0, (36028797018963967L << 8) + 1, "36028797018963974e0");
        test_new(-360287970189639674L, 0, (-36028797018963967L << 8) + 1, "-36028797018963974e0");
        test_new(3602879701896396740L, 0, (36028797018963967L << 8) + 2, "3602879701896396740e0");
        test_new(-3602879701896396740L, 0, (-36028797018963967L << 8) + 2, "-3602879701896396740e0");
        test_new(3602879701896396749L, 0, (36028797018963967L << 8) + 2, "3602879701896396749e0");
        test_new(-3602879701896396749L, 0, (-36028797018963967L << 8) + 2, "-3602879701896396749e0");
        test_new(-360287970189639675L, 0, (-36028797018963968L << 8) + 1, "-36028797018963975e0");
        test_new(360287970189639675L, 0, (3602879701896397L << 8) + 2, "36028797018963975e0");
        test_new(-3602879701896396750L, 0, (-36028797018963968L << 8) + 2, "-3602879701896396750e0");
        test_new(3602879701896396750L, 0, (3602879701896397L << 8) + 3, "3602879701896396750e0");
        test_new(-36028797018963968L, 0, (-36028797018963968L << 8), "-3602879701896398e0");
        test_new(-36028797018963968L, -147, zero.toLong(), "-36028797018963968e-147");
        test_new(-3602879701896396800L, 0, (-36028797018963968L << 8) + 2, "-3602879701896396800e0");
        test_new(3602879701896396800L, 0, (3602879701896397L << 8) + 3, "3602879701896396800e0");
        test_new(4611686018427387903L, 0, (4611686018427388L << 8) + 3, "4611686018427387903");
        test_new(-4611686018427387903L, 0, (-4611686018427388L << 8) + 3, "-4611686018427387903");
        test_new(49, -129, zero.toLong(), "49e-129");
        test_new(50, -129, minnum.toLong(), "50e-129");
        test_new(500000000000L, -139, minnum.toLong(), "500000000000e-139");
        test_new(-500000000000L, -139, negative_minnum.toLong(), "-500000000000e-139");
        test_new(5000000000000000000L, -145, (5 << 8) + (0x81), "5000000000000000000e-145");
        test_new(-5000000000000000000L, -146, negative_minnum.toLong(), "-5000000000000000000e-146");
        test_new(-5555555555555555L, 0, (-5555555555555555L << 8) + 0, "-55555555555555555");
        test_new(-55555555555555555L, 0, (-5555555555555556L << 8) + 1, "-55555555555555555");
        test_new(-555555555555555555L, 0, (-5555555555555556L << 8) + 2, "-555555555555555555");
        test_new(-5555555555555555555L, 0, (-5555555555555556L << 8) + 3, "-5555555555555555555");
        test_new(576460752303423487L, 0, (5764607523034235L << 8) + 2, "1152921504606846975");
        test_new(-576460752303423487L, 0, (-5764607523034235L << 8) + 2, "-1152921504606846975");
        test_new(72057594037927935L, 0, (7205759403792794L << 8) + 1, "72057594037927935");
        test_new(-72057594037927935L, 0, (-7205759403792794L << 8) + 1, "-72057594037927935");
        test_new(9223372036854775807L, 0, (9223372036854776L << 8) + 3, "9223372036854775807");
        test_new(-9223372036854775807L, 0, (-9223372036854776L << 8) + 3, "-9223372036854775807");
        test_new(-9223372036854775807L, 124, (-9223372036854776L << 8) + 127, "-9223372036854775807e124");
        test_new(-9223372036854775807L, 125, nan.toLong(), "-9223372036854775807e125");
        test_new(-9223372036854775807L, -132, (-92233720368548L << 8) + (0x81), "-9223372036854775807e-132");
        test_new(-9223372036854775807L, -133, (-9223372036855L << 8) + (0x81), "-9223372036854775807e-133");
        test_new(9223372036854775807L, -143, (922L << 8) + (0xff & -127), "9223372036854775807e-143");
        test_new(9223372036854775807L, -144, (92L << 8) + (0xff & -127), "9223372036854775807e-144");
        test_new(-9223372036854775807L, -145, (-9 << 8) + (0x81), "-9223372036854775807e-145");
        test_new(9223372036854775807L, -145, (9L << 8) + (0xff & -127), "9223372036854775807e-145");
        test_new(-9223372036854775807L, -146, (-1 << 8) + (0x81), "-9223372036854775807e-146");
        test_new(9223372036854775807L, -146, (1L << 8) + (0xff & -127), "9223372036854775807e-146");
    }

    private void test_new(long a, long b, long e, String m) {
        assertEquals(m, e, new Dec64(a, b).toLong());
    }

}
